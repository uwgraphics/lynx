use bevy::asset::{HandleId, AssetServer, Assets, Handle};
use bevy::ecs::prelude::{Res, ResMut};
use bevy::prelude::{Mesh, Scene};
use bevy_stl;
use bevy_obj::*;
use crate::app_v2::app_utils::file_and_string_utils::directory_structure_utils::*;
use crate::robot_modules::robot::Robot;
use crate::utils::utils_files_and_strings::prelude::*;

#[derive(Debug)]
pub struct IndividualRobotAssetLoader {
    _robot_name: String,
    _link_standard_material_mesh_handle_ids: Vec<Option<HandleId>>,
    _link_wireframe_mesh_handle_ids: Vec<Option<HandleId>>,
    _link_visible_glb_scene_handle_ids: Vec<Option<HandleId>>,
    _link_lower_poly_mesh_handle_ids: Vec<Option<HandleId>>
}
impl IndividualRobotAssetLoader {
    pub fn new(robot_name: &String, asset_server: &Res<AssetServer>) -> Self {
        let mut _link_standard_material_mesh_handle_ids = Vec::new();
        let mut _link_wireframe_mesh_handle_ids = Vec::new();
        let mut _link_visible_glb_scene_handle_ids = Vec::new();
        let mut _link_lower_poly_mesh_handle_ids = Vec::new();

        let robot = Robot::new(robot_name, None).expect(format!("error when loading robot with name {:?} in IndividualRobotAssetContainer", robot_name).as_str());

        let fp_to_robot_dir = get_path_to_particular_robot_directory(robot_name.to_string());

        for l in &robot.get_configuration_module_ref().robot_model_module.links {
            let link_name = l.name.clone();
            let visual_link_path = fp_to_robot_dir.clone() + "/autogenerated_metadata/link_triangle_meshes_visual/" + link_name.as_str() + ".stl";
            if check_if_path_exists(visual_link_path.to_string()) {
                let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/autogenerated_metadata/link_triangle_meshes_visual/" + link_name.as_str() + ".stl";
                let h: Handle<Mesh> = asset_server.load(path.as_str());
                _link_standard_material_mesh_handle_ids.push( Some(h.id) );
                let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/autogenerated_metadata/link_triangle_meshes_visual/" + link_name.as_str() + ".stl#wireframe";
                let h: Handle<Mesh> = asset_server.load(path.as_str());
                _link_wireframe_mesh_handle_ids.push( Some(h.id) );
            } else {
                let collision_link_path = fp_to_robot_dir.clone() + "/autogenerated_metadata/link_triangle_meshes_collision/" + link_name.as_str() + ".stl";
                if check_if_path_exists(collision_link_path.to_string()) {
                    let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/autogenerated_metadata/link_triangle_meshes_collision/" + link_name.as_str() + ".stl";
                    let h: Handle<Mesh> = asset_server.load(path.as_str());
                    _link_standard_material_mesh_handle_ids.push( Some(h.id) );
                    let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/autogenerated_metadata/link_triangle_meshes_collision/" + link_name.as_str() + ".stl#wireframe";
                    let h: Handle<Mesh> = asset_server.load(path.as_str());
                    _link_wireframe_mesh_handle_ids.push( Some(h.id) );
                } else {
                    _link_standard_material_mesh_handle_ids.push(None);
                    _link_wireframe_mesh_handle_ids.push(None);
                }
            }

            // for low poly, do the opposite of above
            let collision_link_path = fp_to_robot_dir.clone() + "/autogenerated_metadata/link_triangle_meshes_collision/" + link_name.as_str() + ".stl";
            if check_if_path_exists(collision_link_path.to_string()) {
                let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/autogenerated_metadata/link_triangle_meshes_collision/" + link_name.as_str() + ".stl";
                let h: Handle<Mesh> = asset_server.load(path.as_str());
                _link_lower_poly_mesh_handle_ids.push(Some(h.id));
            } else {
                let visual_link_path = fp_to_robot_dir.clone() + "/autogenerated_metadata/link_triangle_meshes_visual/" + link_name.as_str() + ".stl";
                if check_if_path_exists(visual_link_path.to_string()) {
                    let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/autogenerated_metadata/link_triangle_meshes_visual/" + link_name.as_str() + ".stl";
                    let h: Handle<Mesh> = asset_server.load(path.as_str());
                    _link_lower_poly_mesh_handle_ids.push(Some(h.id));
                } else {
                    _link_lower_poly_mesh_handle_ids.push(None);
                }
            }

            let link_mesh_filename = l.urdf_link.visual_file_name_without_extension.clone();
            if link_mesh_filename.is_some() {
                let link_mesh_filename_unwrap = link_mesh_filename.unwrap();
                let visible_glb_path = fp_to_robot_dir.clone() + "/base_meshes/visual/" + link_mesh_filename_unwrap.as_str() + ".glb";
                if check_if_path_exists(visible_glb_path.to_string()) {
                    let path = get_file_path_from_dummy_assets_to_robot_dir(robot_name) + "/base_meshes/visual/" + link_mesh_filename_unwrap.as_str() + ".glb#Scene0";
                    let h: Handle<Scene> = asset_server.load(path.as_str());
                    _link_visible_glb_scene_handle_ids.push( Some(h.id) );
                } else {
                    _link_visible_glb_scene_handle_ids.push(None);
                }
            } else {
                _link_visible_glb_scene_handle_ids.push(None);
            }
        }

        return Self { _robot_name: robot_name.clone(),
            _link_standard_material_mesh_handle_ids,
            _link_wireframe_mesh_handle_ids,
            _link_visible_glb_scene_handle_ids,
            _link_lower_poly_mesh_handle_ids };
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////

    pub fn get_link_standard_material_mesh_handle_ids_ref(&self) -> &Vec<Option<HandleId>> { return &self._link_standard_material_mesh_handle_ids }

    pub fn get_link_wireframe_mesh_handle_ids_ref(&self) -> &Vec<Option<HandleId>> { return &self._link_wireframe_mesh_handle_ids }

    pub fn get_link_visible_glb_scene_handle_ids_ref(&self) -> &Vec<Option<HandleId>> { return &self._link_visible_glb_scene_handle_ids }

    pub fn get_link_lower_poly_mesh_handle_ids_ref(&self) -> &Vec<Option<HandleId>> { return &self._link_lower_poly_mesh_handle_ids }

    ////////////////////////////////////////////////////////////////////////////////////////////////

    pub fn get_link_standard_material_mesh_handle_id(&self, idx: usize) -> Result<Option<HandleId>, String> {
        if idx >= self._link_standard_material_mesh_handle_ids.len() {
            return Err(format!("idx {:?} is too high for number of link_standard_material_mesh_handle_ids ({:?})", idx, self._link_standard_material_mesh_handle_ids.len()));
        }

        return Ok(self._link_standard_material_mesh_handle_ids[idx]);
    }

    pub fn get_link_wireframe_mesh_handle_id(&self, idx: usize) -> Result<Option<HandleId>, String> {
        if idx >= self._link_wireframe_mesh_handle_ids.len() {
            return Err(format!("idx {:?} is too high for number of _link_wireframe_mesh_handle_ids ({:?})", idx, self._link_wireframe_mesh_handle_ids.len()));
        }

        return Ok(self._link_wireframe_mesh_handle_ids[idx]);
    }

    pub fn get_link_visible_glb_scene_handle_id(&self, idx: usize) -> Result<Option<HandleId>, String> {
        if idx >= self._link_wireframe_mesh_handle_ids.len() {
            return Err(format!("idx {:?} is too high for number of _link_visible_glb_scene_handle_ids ({:?})", idx, self._link_visible_glb_scene_handle_ids.len()));
        }

        return Ok(self._link_visible_glb_scene_handle_ids[idx]);
    }

    pub fn get_link_lower_poly_mesh_handle_id(&self, idx: usize) -> Result<Option<HandleId>, String> {
        if idx >= self._link_lower_poly_mesh_handle_ids.len() {
            return Err(format!("idx {:?} is too high for number of _link_lower_poly_mesh_handle_ids ({:?})", idx, self._link_lower_poly_mesh_handle_ids.len()));
        }

        return Ok(self._link_lower_poly_mesh_handle_ids[idx]);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////

    pub fn link_has_visible_glb(&self, idx: usize) -> Result<bool, String> {
        if idx >= self._link_visible_glb_scene_handle_ids.len() {
            return Err(format!("idx {:?} is too high (length is {:?})", idx, self._link_visible_glb_scene_handle_ids.len()));
        }

        return Ok(self._link_visible_glb_scene_handle_ids[idx].is_some());
    }
}
